plugins {
    id "java-library"
    id "maven-publish"

    // gRPC
    id "com.google.protobuf" version "0.8.18"
}

group "dev.emortal.api.openmatchsdk"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

def grpcVersion = '1.50.2'
def protobufVersion = "3.21.7"
def protocVersion = protobufVersion

dependencies {
    // gRPC
    api("io.grpc:grpc-protobuf:${grpcVersion}")
    api("io.grpc:grpc-stub:${grpcVersion}")
    api("io.grpc:grpc-netty:${grpcVersion}")

    api("javax.annotation:javax.annotation-api:1.3.2")
    implementation("org.slf4j:slf4j-api:2.0.3")


    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.0")
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs "build/generated/source/proto/main/grpc"
            srcDirs "build/generated/source/proto/main/java"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "development"
            url = uri("https://repo.emortal.dev/snapshots")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_SECRET")
            }
        }
        maven {
            name = "release"
            url = uri("https://repo.emortal.dev/releases")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_SECRET")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'dev.emortal.api'
            artifactId = 'open-match-sdk'

            def commitHash = System.getenv("COMMIT_HASH_SHORT")
            def releaseVersion = System.getenv("RELEASE_VERSION")
            version = commitHash ?: releaseVersion ?: 'local'

            from components.java
        }
    }
}

test {
    useJUnitPlatform()
}